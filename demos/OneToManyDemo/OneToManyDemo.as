package  {		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.ColorTransform;		import cc.cote.airbag.*;	public class OneToManyDemo extends MovieClip 	{				public var airbag:AirBag;		public var container:Sprite = new Sprite();		public var st:Sprite;				public function OneToManyDemo() {						addChild(container);						// Instantiate AirBag object (in this case, we'll add objects as they are created)			airbag = new AirBag()						// Create a bunch of circles and add them to the container			for (var i:uint = 0; i < 25; i++) {				var circle:Sprite = createCircle(0x555555, Math.random() * 20 + 10, Math.random() * 125 + 25);				container.addChild(circle);								// The add() method adds the object to the detection list				airbag.add(circle);			}						// Add a singleTarget (yellow) against which collision will be detected			st = createCircle(0xffa200, 25, 0);			st.x = stage.stageWidth / 2;			st.y = stage.stageHeight / 2;			addChildAt(st, 0);			airbag.singleTarget = st;						// Perform collision detection on each frame			addEventListener(Event.ENTER_FRAME, detect);					}				public function detect(e:Event):void {						// Check collisions			var allCollisions:Vector.<Collision> = airbag.checkCollisions();						var ct:ColorTransform = new ColorTransform();						// Reset all existing circles' color to gray			for (var i:uint = 0; i < container.numChildren; i++) {				ct.color = 0x55555;				container.getChildAt(i).transform.colorTransform = ct;			}			ct.color = 0xffa200;			st.transform.colorTransform = ct;						// Go through all collisioning objects and color them red			for each (var collision in allCollisions) {				ct.color = 0xFF0000;				collision.objects[0].transform.colorTransform = ct;				collision.objects[1].transform.colorTransform = ct;			}					}				public function createCircle(color:uint, size:Number, offset:Number):Sprite {			var circle:Sprite = new Sprite();			circle.graphics.beginFill(color, .5);			circle.graphics.drawCircle(offset, offset, size);			circle.x = Math.random() * stage.stageWidth;			circle.y = Math.random() * stage.stageHeight;			circle.addEventListener(Event.ENTER_FRAME, rotate);			return circle;		}				public function rotate(e:Event):void {			e.currentTarget.rotation += .5;		}			}	}